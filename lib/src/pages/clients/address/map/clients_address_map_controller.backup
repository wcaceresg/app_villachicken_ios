import 'dart:async';

import 'package:flutter/material.dart';
import 'package:geocoding/geocoding.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:geolocator/geolocator.dart';
import 'package:location/location.dart' as location;
import 'package:villachicken/src/providers/address_provider.dart';
import 'package:villachicken/src/utils/shared_pref.dart';
class ClientAddressMapController{
  late BuildContext context;
  late Function refresh;
  
  late String addressName;
  late LatLng addressLatLng;
  AddressProvider addressprovider=new AddressProvider();
  CameraPosition initialPosition=CameraPosition(
    target: LatLng(-12.1056334,-76.9686237),
    zoom: 14

  );
  Completer<GoogleMapController> _mapController=Completer();
  late Position _position;
  SharedPref _sharedPref=new SharedPref(); 
  Future init(BuildContext context,Function refresh) async{
    this.context=context;
    this.refresh=refresh;
    await addressprovider.init(context,  await _sharedPref.read('user') ?? {});
    
    checkGPS();
  }
  void selectrefPoint() async{

    Map<String,dynamic> data ={
      'address':addressName,
      'lat':addressLatLng.latitude,
      'lng':addressLatLng.longitude
    };
    final res=await addressprovider.validate_cobertura(addressLatLng.latitude.toString(),addressLatLng.latitude.toString());
    if(res['success']==true){
      //print('valido');
          Map<String,dynamic> data ={
      'address':addressName,
      'lat':addressLatLng.latitude,
      'lng':addressLatLng.longitude,
      'merchant_id':res['merchantid'],
      'idtienda':res['idtienda'],
      'recargo':res['recargo'],
    };
    _sharedPref.save('cobertura', data);
      Navigator.of(context).pushNamed('client/address/create', arguments: data);
    }else{

    Map<String,dynamic> data ={
      'address':addressName,
      'lat':addressLatLng.latitude,
      'lng':addressLatLng.longitude,
      'merchant_id':'1234',
      'idtienda':'TI-1500',
      'recargo':0,
    };
    _sharedPref.save('cobertura', data);

      Navigator.of(context).pushNamed('client/address/create', arguments: data);
      // dialog(res['mensaje']);
    }
   // return;
    //Navigator.pop(context,data);
    //Navigator.of(context).pushNamed('client/address/create', arguments: data);


    
  }
  Future dialog(message){
    return showDialog(context: context, 
       barrierDismissible: false,
       builder: (context)=>AlertDialog(
       title: Text(message),
      // content: Text('el texto del cuadro'),
       actions: <Widget>[
        TextButton(onPressed:() {
             Navigator.of(context).pop('Aceptar');
        }, child: Text('Aceptar'))

        
       ],
    ));
  }
  Future<Null> setLocationDraggableInfo() async{
    if(initialPosition!=null){
      double lat = initialPosition.target.latitude;
      double lng = initialPosition.target.longitude;
      try {
       List<Placemark> address=await placemarkFromCoordinates(lat,lng);
      if(address!=null){
        if(address.length>0){
          String direction=address[0].thoroughfare!;
          String street=address[0].subThoroughfare!;
          String city=address[0].locality!;
          String department=address[0].administrativeArea!;
          String country=address[0].country!;
          addressName='$direction $street, $city, $department';
          addressLatLng=new LatLng(lat, lng);
          refresh();
        }
      }       
      } catch (e) {
        print(e);
      }

    }
  }
  void goTonewAddress(){
    Navigator.pushNamed(context, 'client/address/create');
  }
  void onMapCreated(GoogleMapController controller){
    controller.setMapStyle('[{"elementType":"geometry","stylers":[{"color":"#f5f5f5"}]},{"elementType":"labels.icon","stylers":[{"visibility":"off"}]},{"elementType":"labels.text.fill","stylers":[{"color":"#616161"}]},{"elementType":"labels.text.stroke","stylers":[{"color":"#f5f5f5"}]},{"featureType":"administrative.land_parcel","elementType":"labels.text.fill","stylers":[{"color":"#bdbdbd"}]},{"featureType":"poi","elementType":"geometry","stylers":[{"color":"#eeeeee"}]},{"featureType":"poi","elementType":"labels.text.fill","stylers":[{"color":"#757575"}]},{"featureType":"poi.park","elementType":"geometry","stylers":[{"color":"#e5e5e5"}]},{"featureType":"poi.park","elementType":"labels.text.fill","stylers":[{"color":"#9e9e9e"}]},{"featureType":"road","elementType":"geometry","stylers":[{"color":"#ffffff"}]},{"featureType":"road.arterial","elementType":"labels.text.fill","stylers":[{"color":"#757575"}]},{"featureType":"road.highway","elementType":"geometry","stylers":[{"color":"#dadada"}]},{"featureType":"road.highway","elementType":"labels.text.fill","stylers":[{"color":"#616161"}]},{"featureType":"road.local","elementType":"labels.text.fill","stylers":[{"color":"#9e9e9e"}]},{"featureType":"transit.line","elementType":"geometry","stylers":[{"color":"#e5e5e5"}]},{"featureType":"transit.station","elementType":"geometry","stylers":[{"color":"#eeeeee"}]},{"featureType":"water","elementType":"geometry","stylers":[{"color":"#c9c9c9"}]},{"featureType":"water","elementType":"labels.text.fill","stylers":[{"color":"#9e9e9e"}]}]');
    _mapController.complete(controller);
  }

  void updateLocation() async{
    try{
      await _determinePosition();// obtener la posicion actual y solicitar los permisos
      // _position=await Geolocator.getLastKnownPosition() ; // lat y lng
       animateCameraToPosition(_position.latitude,_position.longitude);
    }catch(e){
      print('error'+e.toString());
    }
  }
  void checkGPS() async{
    bool isLocationEnabled=await Geolocator.isLocationServiceEnabled();
    if(isLocationEnabled){
      updateLocation();
    }else{
      // preguntar al usuario  para activar el gsp
      bool locationGPS=await  location.Location().requestService();
      if(locationGPS){
        updateLocation();
      }
    }
  }
  Future animateCameraToPosition(double lat,double lng) async{
    GoogleMapController controller=await _mapController.future;
    if(controller !=null){
      controller.animateCamera(CameraUpdate.newCameraPosition(
        CameraPosition(
          target:LatLng(lat,lng),
          zoom:17,
          bearing: 0
        )
      ));
    }
  }
  Future<Position> _determinePosition() async {
    bool serviceEnabled;
    LocationPermission permission;

    // Test if location services are enabled.
    serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {

      return Future.error('Location services are disabled.');
    }

    permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {

        return Future.error('Location permissions are denied');
      }
    }
    
    if (permission == LocationPermission.deniedForever) {
    
      return Future.error(
        'Location permissions are permanently denied, we cannot request permissions.');
    } 


    return await Geolocator.getCurrentPosition();
  }

  


}